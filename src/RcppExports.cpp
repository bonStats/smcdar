// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// lotka_volterra_generator
List lotka_volterra_generator(NumericVector theta, int y1_min, int y1_max, int y2_min, int y2_max);
RcppExport SEXP _smcdar_lotka_volterra_generator(SEXP thetaSEXP, SEXP y1_minSEXP, SEXP y1_maxSEXP, SEXP y2_minSEXP, SEXP y2_maxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< int >::type y1_min(y1_minSEXP);
    Rcpp::traits::input_parameter< int >::type y1_max(y1_maxSEXP);
    Rcpp::traits::input_parameter< int >::type y2_min(y2_minSEXP);
    Rcpp::traits::input_parameter< int >::type y2_max(y2_maxSEXP);
    rcpp_result_gen = Rcpp::wrap(lotka_volterra_generator(theta, y1_min, y1_max, y2_min, y2_max));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_smcdar_lotka_volterra_generator", (DL_FUNC) &_smcdar_lotka_volterra_generator, 5},
    {NULL, NULL, 0}
};

RcppExport void R_init_smcdar(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
